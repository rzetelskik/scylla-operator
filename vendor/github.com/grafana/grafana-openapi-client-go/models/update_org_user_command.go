// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrgUserCommand update org user command
//
// swagger:model UpdateOrgUserCommand
type UpdateOrgUserCommand struct {

	// role
	// Enum: [None Viewer Editor Admin]
	Role string `json:"role,omitempty"`
}

// Validate validates this update org user command
func (m *UpdateOrgUserCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrgUserCommandTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Viewer","Editor","Admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrgUserCommandTypeRolePropEnum = append(updateOrgUserCommandTypeRolePropEnum, v)
	}
}

const (

	// UpdateOrgUserCommandRoleNone captures enum value "None"
	UpdateOrgUserCommandRoleNone string = "None"

	// UpdateOrgUserCommandRoleViewer captures enum value "Viewer"
	UpdateOrgUserCommandRoleViewer string = "Viewer"

	// UpdateOrgUserCommandRoleEditor captures enum value "Editor"
	UpdateOrgUserCommandRoleEditor string = "Editor"

	// UpdateOrgUserCommandRoleAdmin captures enum value "Admin"
	UpdateOrgUserCommandRoleAdmin string = "Admin"
)

// prop value enum
func (m *UpdateOrgUserCommand) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrgUserCommandTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateOrgUserCommand) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update org user command based on context it is used
func (m *UpdateOrgUserCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateOrgUserCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateOrgUserCommand) UnmarshalBinary(b []byte) error {
	var res UpdateOrgUserCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
